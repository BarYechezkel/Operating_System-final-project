        -:    0:Source:MST_graph.hpp
        -:    1:#ifndef MST_GRAPH_HPP
        -:    2:#define MST_GRAPH_HPP
        -:    3:#include <algorithm>
        -:    4:#include <iostream>
        -:    5:#include <queue>
        -:    6:#include <set>
        -:    7:#include <tuple>
        -:    8:#include <utility>
        -:    9:#include <vector>
        -:   10:using namespace std;
        -:   11:
        -:   12:class MST_graph {
        -:   13:    vector<tuple<int, int, int, int>> edges;  // (from, to, weight, id)
        -:   14:    int numVertices;
        -:   15:    vector<vector<int>> alldistances;  // all distances between vertices
        -:   16:    string strategy;
        -:   17:
        -:   18:   public:
        4:   19:    MST_graph() {
        4:   20:        numVertices = 0;
        4:   21:    };  // Default constructor
        -:   22:    MST_graph(int n) : numVertices(n) {
        -:   23:        alldistances.resize(n, vector<int>(n, 0));
        -:   24:    }
        -:   25:    MST_graph(vector<tuple<int, int, int, int>> edges, string strategy);
       7*:   26:    vector<tuple<int, int, int, int>> getEdges() const {
       7*:   27:        return edges;
        -:   28:    }
------------------
_ZNK9MST_graph8getEdgesEv:
        7:   26:    vector<tuple<int, int, int, int>> getEdges() const {
        7:   27:        return edges;
        -:   28:    }
------------------
_ZNK9MST_graph8getEdgesEv:
    #####:   26:    vector<tuple<int, int, int, int>> getEdges() const {
    #####:   27:        return edges;
        -:   28:    }
------------------
       12:   29:    vector<vector<int>> getAllDistances() const {
       12:   30:        return alldistances;
        -:   31:    }
        -:   32:    string toString() const;
        -:   33:    string getStrategy() const {
        -:   34:        return strategy;
        -:   35:    }
        3:   36:    void setStrategy(string s) {
        3:   37:        strategy = s;
        3:   38:    }
        -:   39:};
        -:   40:#endif  // MST_GRAPH_HPP
