        -:    0:Source:Graph.cpp
        -:    1:#ifndef GRAPH_HPP
        -:    2:#define GRAPH_HPP
        -:    3:#include <algorithm>
        -:    4:#include <cassert>
        -:    5:#include <iostream>
        -:    6:#include <random>
        -:    7:#include <tuple>  // Include the tuple header
        -:    8:#include <vector>
        -:    9:using namespace std;
        -:   10:
        -:   11:class Graph {
        -:   12:   private:
        -:   13:    std::vector<std::tuple<int, int, int, int>> edges;  // (from, to, weight, id)
        -:   14:    int numVertices;
        -:   15:
        -:   16:   public:
        8:   17:    Graph() {};  // Default constructor
        -:   18:    Graph(int n) : numVertices(n) {}
        -:   19:    // return the next id
       11:   20:    int getSize() {
       11:   21:        return edges.size();
        -:   22:    }
        3:   23:    int getnumVertices() {
        3:   24:        return numVertices;
        -:   25:    }
        -:   26:
        3:   27:    void setEdges(vector<std::tuple<int, int, int, int>>& e) {
        3:   28:        edges = e;
        3:   29:    }
        3:   30:    void setnumVertices(int n) {
        3:   31:        numVertices = n;
        3:   32:    }
        -:   33:    // return edges
       10:   34:    vector<tuple<int, int, int, int>> getEdges() {
       10:   35:        return edges;
        -:   36:    }
       64:   37:    tuple<int, int, int, int> getEdge(int i) {
        -:   38:        // cout << "getEdge" << endl;
        -:   39:        // print all parmeters
        -:   40:        int u, v, w, id;
       64:   41:        tie(u, v, w, id) = edges[i];
        -:   42:        // cout << "Edge " << i << ": " << u << " " << v << " " << w << endl;
       64:   43:        return edges[i];
        -:   44:    }
        -:   45:    // get the number of vertices
        -:   46:    int getNumVertices() {
        -:   47:        return numVertices;
        -:   48:    }
        -:   49:
        3:   50:    void addEdge(int from, int to, int weight, int id) {
        3:   51:        edges.emplace_back(from, to, weight, id - 2);
        3:   52:        edges.emplace_back(to, from, weight, -2);
        3:   53:    }
        -:   54:
        -:   55:    // remove the edgefrom to and to from
        -:   56:    // erase the edge from to
        2:   57:    void removeEdge(int from, int to) {
       10:   58:        for (int i = 0; i < edges.size(); i++) {
        -:   59:            int u, v, w, id;
       10:   60:            tie(u, v, w, id) = edges[i];
       10:   61:            if (u == from && v == to) {
        2:   62:                edges.erase(edges.begin() + i);
        2:   63:                break;
        -:   64:            }
        -:   65:        }
       10:   66:        for (int i = 0; i < edges.size(); i++) {
        -:   67:            int u, v, w, id;
       10:   68:            tie(u, v, w, id) = edges[i];
       10:   69:            if (u == to && v == from) {
        2:   70:                edges.erase(edges.begin() + i);
        2:   71:                break;
        -:   72:            }
        -:   73:        }
        2:   74:    }
        -:   75:
        3:   76:    void reduceEdges(int id, int newWhight) {
       21:   77:        for (auto& edge : edges) {
       18:   78:            if (std::get<3>(edge) == id) {
        3:   79:                std::get<2>(edge) = newWhight;
        -:   80:            }
        -:   81:        }
        3:   82:    }
        -:   83:    // print edge just one side to - from not from - to
        -:   84:
       11:   85:    string toString() {
       11:   86:        string ans = "";
       75:   87:        for (int i = 0; i < edges.size(); i++) {
        -:   88:            int u, v, w, id;
       64:   89:            tie(u, v, w, id) = this->getEdge(i);
       64:   90:            if (id == -2) {
       32:   91:                continue;
        -:   92:            }
       32:   93:            ans += "Edge " + to_string(id) + ": " + to_string(u) + " " + to_string(v) + " " + to_string(w) + "\n";
        -:   94:        }
       11:   95:        return ans;
    =====:   96:    }
        -:   97:};
        -:   98:#endif  // GRAPH_HPP
