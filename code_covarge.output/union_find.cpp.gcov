        -:    0:Source:union_find.cpp
        -:    1:#include "union_find.hpp"
        -:    2:
        -:    3:#include <algorithm>
        -:    4:#include <numeric>
        -:    5:#include <vector>
        -:    6:
        -:    7:using namespace std;
        -:    8:
        3:    9:UnionFind::UnionFind(int _n)
        -:   10:{
        3:   11:	n = _n;
        3:   12:	cc = n;
        3:   13:	parent.resize(n);
        3:   14:	rank.assign(n, 1);
        3:   15:	iota(parent.begin(), parent.end(), 0);
        3:   16:}
        -:   17:
       62:   18:int UnionFind::find_parent(int node)
        -:   19:{
       62:   20:	if (parent[node] != node) parent[node] = find_parent(parent[node]);
       62:   21:	return parent[node];
        -:   22:}
        -:   23:
       20:   24:bool UnionFind::unite(int x, int y)
        -:   25:{
       20:   26:	x = find_parent(x);
       20:   27:	y = find_parent(y);
       20:   28:	if (x == y) return false;
        6:   29:	if (rank[x] < rank[y]) parent[x] = y;
        -:   30:	else
        3:   31:		parent[y] = x;
        6:   32:	rank[x] += (rank[x] == rank[y]);
        6:   33:	--cc;
        6:   34:	return true;
        -:   35:}
