        -:    0:Source:LeaderFollowerPool.cpp
        -:    1:#include "LeaderFollowerPool.hpp"
        -:    2:
        -:    3:#include <chrono>
        -:    4:#include <iostream>
        -:    5:
        3:    6:void LeaderFollowerPool::start() {
        -:    7:    {
        3:    8:        lock_guard<mutex> lock(mutexqueue);  // Lock the mutex
        3:    9:        stopFlag_ = false;
        3:   10:    }
        3:   11:}
        -:   12:// Update constructor to accept shared answer stream and mutex
        3:   13:LeaderFollowerPool::LeaderFollowerPool(int numThreads, std::mutex& ansMutex)
        3:   14:    : numThreads_(numThreads), stopFlag_(false), ansMutex(ansMutex), leader_exists(false) {
       15:   15:    for (int i = 0; i < numThreads_; ++i) {
       12:   16:        workers_.emplace_back(&LeaderFollowerPool::leaderRole, this);
        -:   17:    }
        3:   18:}
        -:   19:
        3:   20:LeaderFollowerPool::~LeaderFollowerPool() {
        3:   21:    stop();
        3:   22:}
        -:   23:
        3:   24:void LeaderFollowerPool::addEventHandler(void* task) {
        3:   25:    std::lock_guard<std::mutex> lock(mutexqueue);
        3:   26:    eventQueue_.push(task);
        3:   27:    cv_.notify_one();  // Notify the leader thread to handle the event
        3:   28:}
        -:   29:
        3:   30:void LeaderFollowerPool::mainFunction(void* task) {
        3:   31:    std::lock_guard<std::mutex> lock(ansMutex);  // Lock the shared answer stream
        -:   32:    MST_stats mst_stats;
        -:   33:
        3:   34:    auto* taskTuple = static_cast<tuple<MST_graph*, string*, int>*>(task);
        -:   35:    // if (!taskTuple) {
        -:   36:    //     cout << "Error: Invalid task tuple" << endl;
        -:   37:    //     return;
        -:   38:    // }
        3:   39:    MST_graph* clientMST = std::get<0>(*taskTuple);
        3:   40:    string* clientAns = std::get<1>(*taskTuple);
        3:   41:    int fdclient = std::get<2>(*taskTuple);
        -:   42:
        3:   43:    std::ostringstream localAns;  // Local answer stream
        3:   44:    localAns << "Thread " << std::this_thread::get_id() << "\n";
        3:   45:    localAns << " Longest path: " << mst_stats.getLongestDistance(*clientMST) << "\n";
        3:   46:    localAns << " Shortest path: " << mst_stats.getShortestDistance(*clientMST) << "\n";
        3:   47:    localAns << " Average path: " << mst_stats.getAverageDistance(*clientMST) << "\n";
        3:   48:    localAns << " Total weight: " << mst_stats.getTotalWeight(*clientMST) << "\n";
        3:   49:    delete taskTuple;  // Clean up dynamically allocated memory
        -:   50:
        -:   51:    // send the response back to the client
        3:   52:    if (send(fdclient, localAns.str().c_str(), localAns.str().length(), 0) == -1) {
    #####:   53:        perror("send");
        -:   54:    }
        3:   55:}
        -:   56:
       15:   57:void LeaderFollowerPool::leaderRole() {
        -:   58:    while (true) {
       15:   59:        void* task = nullptr;
        -:   60:        {
       15:   61:            std::unique_lock<std::mutex> lock(mutexqueue);
       15:   62:            cv_.wait(lock, [this] {
       33:   63:                std::lock_guard<std::mutex> stopLock(mutexstop);  // Lock mutexstop for stopFlag_ check
       66:   64:                return (!eventQueue_.empty() && !leader_exists) || stopFlag_;
       33:   65:            });
        -:   66:            
       15:   67:           leader_exists = true;
        -:   68:
       15:   69:            if (stopFlag_ && eventQueue_.empty()) {
       24:   70:                return;  // Shutdown check
        -:   71:            }
        -:   72:
       3*:   73:            if (!eventQueue_.empty()) {
        -:   74:                // Get the next task
        3:   75:                task = std::move(eventQueue_.front());
        3:   76:                eventQueue_.pop();
        3:   77:                leader_exists = false;
        -:   78:                // Notify other threads that a new leader can be elected
        3:   79:                followerRole();
        -:   80:            } else {
    #####:   81:                continue;  // Recheck if spurious wakeup
        -:   82:            }
       15:   83:        }
        -:   84:
        -:   85:        // Execute the task outside the lock
        3:   86:        if (task) {
        3:   87:            mainFunction(task);
        -:   88:        }
        3:   89:    }
        -:   90:}
        -:   91:
        3:   92:void LeaderFollowerPool::followerRole() {
        -:   93:     //lock_guard<mutex> lock(mutexqueue);
        3:   94:    cv_.notify_one();  // Wake up next thread to be leader
        3:   95:}
        -:   96:
        -:   97:// Method to gracefully stop the thread pool
        3:   98:void LeaderFollowerPool::stop() {
        -:   99:    {
        3:  100:        std::lock_guard<std::mutex> lock(mutexqueue);  // Lock the mutex for the queue
        3:  101:        stopFlag_ = true;
        3:  102:        cv_.notify_all();  // Notify all waiting threads with the lock held
        3:  103:    }
        -:  104:
       15:  105:    for (auto& worker : workers_) {
       12:  106:        if (worker.joinable()) {
       12:  107:            worker.join();  // Wait for all worker threads to finish
        -:  108:        }
        -:  109:    }
        3:  110:    workers_.clear();  // Clear the worker threads vector
        -:  111:
        -:  112:    // cout << "LeaderFollowerPool stopped all worker threads." << endl;
        3:  113:}
