        -:    0:Source:Graph.cpp
        -:    1:#ifndef GRAPH_HPP
        -:    2:#define GRAPH_HPP
        -:    3:#include <algorithm>
        -:    4:#include <cassert>
        -:    5:#include <iostream>
        -:    6:#include <random>
        -:    7:#include <tuple>  // Include the tuple header
        -:    8:#include <vector>
        -:    9:using namespace std;
        -:   10:
        -:   11:class Graph {
        -:   12:   private:
        -:   13:    std::vector<std::tuple<int, int, int, int>> edges;  // (from, to, weight, id)
        -:   14:    int numVertices;
        -:   15:
        -:   16:   public:
        6:   17:    Graph() {};  // Default constructor
        -:   18:    Graph(int n) : numVertices(n) {}
        -:   19:    // return the next id
       19:   20:    int getSize() {
       19:   21:        return edges.size();
        -:   22:    }
        6:   23:    int getnumVertices() {
        6:   24:        return numVertices;
        -:   25:    }
        -:   26:
        3:   27:    void setEdges(vector<std::tuple<int, int, int, int>>& e) {
        3:   28:        edges = e;
        3:   29:    }
        3:   30:    void setnumVertices(int n) {
        3:   31:        numVertices = n;
        3:   32:    }
        -:   33:    // return edges
       18:   34:    vector<tuple<int, int, int, int>> getEdges() {
       18:   35:        return edges;
        -:   36:    }
       76:   37:    tuple<int, int, int, int> getEdge(int i) {
        -:   38:        // cout << "getEdge" << endl;
        -:   39:        // print all parmeters
        -:   40:        int u, v, w, id;
       76:   41:        tie(u, v, w, id) = edges[i];
        -:   42:        // cout << "Edge " << i << ": " << u << " " << v << " " << w << endl;
       76:   43:        return edges[i];
        -:   44:    }
        -:   45:    // get the number of vertices
        -:   46:    int getNumVertices() {
        -:   47:        return numVertices;
        -:   48:    }
        -:   49:
        4:   50:    void addEdge(int from, int to, int weight, int id) {
        4:   51:        edges.emplace_back(from, to, weight, id - 2);
        4:   52:        edges.emplace_back(to, from, weight, -2);
        4:   53:    }
        -:   54:
        -:   55:    // remove the edgefrom to and to from
        -:   56:    // erase the edge from to
        3:   57:    void removeEdge(int from, int to) {
       15:   58:        for (int i = 0; i < edges.size(); i++) {
        -:   59:            int u, v, w, id;
       15:   60:            tie(u, v, w, id) = edges[i];
       15:   61:            if (u == from && v == to) {
        3:   62:                edges.erase(edges.begin() + i);
        3:   63:                break;
        -:   64:            }
        -:   65:        }
       15:   66:        for (int i = 0; i < edges.size(); i++) {
        -:   67:            int u, v, w, id;
       15:   68:            tie(u, v, w, id) = edges[i];
       15:   69:            if (u == to && v == from) {
        3:   70:                edges.erase(edges.begin() + i);
        3:   71:                break;
        -:   72:            }
        -:   73:        }
        -:   74:
        -:   75:        
        3:   76:    }
        -:   77:
        3:   78:    void reduceEdges(int from,int to, int newWhight) {
        -:   79:        //change weight from to and to from 
       23:   80:        for (int i = 0; i < edges.size(); i++) {
        -:   81:            int u, v, w, id;
       20:   82:            tie(u, v, w, id) = edges[i];
       20:   83:            if (u == from && v == to || u == to && v == from) {
        6:   84:                edges[i] = make_tuple(u, v, newWhight, id);
        6:   85:                edges[i] = make_tuple(v, u, newWhight, id);
        -:   86:            }
        -:   87:        }
       23:   88:        for (size_t i = 0; i < edges.size(); i++) {
        -:   89:            int u, v, w, id;
       20:   90:            tie(u, v, w, id) = edges[i];
        -:   91:        //    cout << " edge : " << u << " v:  " << v << " w: " << w << " id:  " << id << endl;
        -:   92:        }
        3:   93:    }
        -:   94:    // print edge just one side to - from not from - to
       13:   95:    string toString() {
       13:   96:        string ans = "";
        -:   97:     //   cout << "toString called" << endl;
       89:   98:        for (int i = 0; i < edges.size(); i++) {
        -:   99:            int u, v, w, id;
       76:  100:            tie(u, v, w, id) = this->getEdge(i);
        -:  101:          //  cout << "Processing edge " << i << ": " << u << " " << v << " " << w << " " << id << endl;
       76:  102:            if (id == -2) {
        -:  103:             //   cout << "Skipping reverse edge " << i << endl;
       38:  104:                continue;
        -:  105:            }
       38:  106:            ans += "Edge " + to_string(id) + ": " + to_string(u) + " " + to_string(v) + " " + to_string(w) + "\n";
        -:  107:           // cout << "Edge added to string: " << "Edge " + to_string(id) + ": " + to_string(u) + " " + to_string(v) + " " + to_string(w) << endl;
        -:  108:        }
        -:  109:        //cout << "toString completed" << endl;
       13:  110:        return ans;
    =====:  111:    }
        -:  112:};
        -:  113:#endif  // GRAPH_HPP
