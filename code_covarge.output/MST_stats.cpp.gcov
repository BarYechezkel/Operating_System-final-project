        -:    0:Source:MST_stats.cpp
        -:    1:#include "MST_stats.hpp"
        -:    2:
        2:    3:    int MST_stats::getTotalWeight(const MST_graph& mst){
        2:    4:        vector<tuple<int, int, int, int>> edges = mst.getEdges();
        2:    5:        int totalWeight = 0;
        6:    6:        for (const auto& e : edges) {
        -:    7:            int u, v, w, id;
        4:    8:            tie(u, v, w, id) = e;
        4:    9:            totalWeight += w;
        -:   10:        }
        2:   11:        return totalWeight;
        2:   12:    }
        -:   13:
        2:   14:int MST_stats::getLongestDistance(const MST_graph& mst) {
        2:   15:    vector<vector<int>> alldistances = mst.getAllDistances();
        2:   16:    int longestDistance = INT_MIN;
        8:   17:    for (int i = 0; i < alldistances.size(); i++) {
       24:   18:        for (int j = 0; j < alldistances[i].size(); j++) {
       18:   19:            if (alldistances[i][j] > longestDistance) {
        4:   20:                longestDistance = alldistances[i][j];
        -:   21:            }
        -:   22:        }
        -:   23:    }
        2:   24:    return longestDistance;
        2:   25:}
        -:   26:
        2:   27:int MST_stats::getShortestDistance(const MST_graph& mst) {
        2:   28:    vector<vector<int>> alldistances = mst.getAllDistances();
        2:   29:    int shortestDistance = INT_MAX;
        8:   30:    for (int i = 0; i < alldistances.size(); i++) {
       24:   31:        for (int j = 0; j < alldistances[i].size(); j++) {
       18:   32:            if (alldistances[i][j] < shortestDistance && alldistances[i][j]!=0) {
        6:   33:                shortestDistance = alldistances[i][j];
        -:   34:            }
        -:   35:        }
        -:   36:    }
        2:   37:    return shortestDistance;
        2:   38:}
        -:   39:
        -:   40://over just on above the diagonal
        -:   41:
        -:   42:// Function to get the average distance in the MST graph
        2:   43:double MST_stats::getAverageDistance(const MST_graph& mst) {
        2:   44:    vector<vector<int>> alldistances = mst.getAllDistances();
        2:   45:    int sum = 0;
        2:   46:    int count = 0;
        -:   47:
        -:   48:    // cout << "Calculating average distance" << endl;
        -:   49:    // cout << "Number of vertices: " << alldistances.size() << endl;
        -:   50:
        8:   51:    for (int i = 0; i < alldistances.size(); i++) {
       12:   52:        for (int j = i + 1; j < alldistances[i].size(); j++) {
        6:   53:            sum += alldistances[i][j];
        6:   54:            count++;
        -:   55:      //      cout << "Adding distance between vertex " << i << " and vertex " << j << ": " << alldistances[i][j] << endl;
        -:   56:        }
        -:   57:    }
        -:   58:
        2:   59:    double averageDistance = (double)sum / count;
        -:   60:  //  cout << "Total sum of distances: " << sum << endl;
        -:   61:    // cout << "Total number of distances: " << count << endl;
        -:   62:    // cout << "Average distance: " << averageDistance << endl;
        -:   63:
        2:   64:    return averageDistance;
        2:   65:}
        -:   66:
        -:   67:
        -:   68:
