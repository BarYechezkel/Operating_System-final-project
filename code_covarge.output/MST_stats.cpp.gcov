        -:    0:Source:MST_stats.cpp
        -:    1:#include "MST_stats.hpp"
        -:    2:
        6:    3:    int MST_stats::getTotalWeight(const MST_graph& mst){
        6:    4:        vector<tuple<int, int, int, int>> edges = mst.getEdges();
        6:    5:        int totalWeight = 0;
       18:    6:        for (const auto& e : edges) {
        -:    7:            int u, v, w, id;
       12:    8:            tie(u, v, w, id) = e;
       12:    9:            totalWeight += w;
        -:   10:        }
        6:   11:        return totalWeight;
        6:   12:    }
        -:   13:
        6:   14:int MST_stats::getLongestDistance(const MST_graph& mst) {
        6:   15:    vector<vector<int>> alldistances = mst.getAllDistances();
        6:   16:    int longestDistance = INT_MIN;
       24:   17:    for (int i = 0; i < alldistances.size(); i++) {
       72:   18:        for (int j = 0; j < alldistances[i].size(); j++) {
       54:   19:            if (alldistances[i][j] > longestDistance) {
       12:   20:                longestDistance = alldistances[i][j];
        -:   21:            }
        -:   22:        }
        -:   23:    }
        6:   24:    return longestDistance;
        6:   25:}
        -:   26:
        6:   27:int MST_stats::getShortestDistance(const MST_graph& mst) {
        6:   28:    vector<vector<int>> alldistances = mst.getAllDistances();
        6:   29:    int shortestDistance = INT_MAX;
       24:   30:    for (int i = 0; i < alldistances.size(); i++) {
       72:   31:        for (int j = 0; j < alldistances[i].size(); j++) {
       54:   32:            if (alldistances[i][j] < shortestDistance && alldistances[i][j]!=0) {
       18:   33:                shortestDistance = alldistances[i][j];
        -:   34:            }
        -:   35:        }
        -:   36:    }
        6:   37:    return shortestDistance;
        6:   38:}
        -:   39:
        -:   40://over just on above the diagonal
        -:   41:
        -:   42:// Function to get the average distance in the MST graph
        6:   43:double MST_stats::getAverageDistance(const MST_graph& mst) {
        6:   44:    vector<vector<int>> alldistances = mst.getAllDistances();
        6:   45:    int sum = 0;
        6:   46:    int count = 0;
        -:   47:
        -:   48:    // cout << "Calculating average distance" << endl;
        -:   49:    // cout << "Number of vertices: " << alldistances.size() << endl;
        -:   50:
       24:   51:    for (int i = 0; i < alldistances.size(); i++) {
       36:   52:        for (int j = i + 1; j < alldistances[i].size(); j++) {
       18:   53:            sum += alldistances[i][j];
       18:   54:            count++;
        -:   55:      //      cout << "Adding distance between vertex " << i << " and vertex " << j << ": " << alldistances[i][j] << endl;
        -:   56:        }
        -:   57:    }
        -:   58:
        6:   59:    double averageDistance = (double)sum / count;
        -:   60:  //  cout << "Total sum of distances: " << sum << endl;
        -:   61:    // cout << "Total number of distances: " << count << endl;
        -:   62:    // cout << "Average distance: " << averageDistance << endl;
        -:   63:
        6:   64:    return averageDistance;
        6:   65:}
        -:   66:
        -:   67:
        -:   68:
