        -:    0:Source:LeaderFollowerPool.cpp
        -:    1:#include "LeaderFollowerPool.hpp"
        -:    2:
        -:    3:#include <chrono>
        -:    4:#include <iostream>
        -:    5:
        4:    6:void LeaderFollowerPool::start() {
        -:    7:    {
        4:    8:        lock_guard<mutex> lock(mutexqueue);  // Lock the mutex
        4:    9:        stopFlag_ = false;
        4:   10:    }
        4:   11:}
        -:   12:// Update constructor to accept shared answer stream and mutex
        4:   13:LeaderFollowerPool::LeaderFollowerPool(int numThreads, std::mutex& ansMutex)
        4:   14:    : numThreads_(numThreads), stopFlag_(false), ansMutex(ansMutex) {
       20:   15:    for (int i = 0; i < numThreads_; ++i) {
       16:   16:        workers_.emplace_back(&LeaderFollowerPool::leaderRole, this);
        -:   17:    }
        4:   18:}
        -:   19:
        4:   20:LeaderFollowerPool::~LeaderFollowerPool() {
        4:   21:    stop();
        4:   22:}
        -:   23:
        2:   24:void LeaderFollowerPool::addEventHandler(void* task) {
        2:   25:    std::lock_guard<std::mutex> lock(mutexqueue);
        2:   26:    eventQueue_.push(task);
        2:   27:    cv_.notify_one();  // Notify the leader thread to handle the event
        2:   28:}
        -:   29:
        2:   30:void LeaderFollowerPool::mainFunction(void* task) {
        2:   31:    std::lock_guard<std::mutex> lock(ansMutex);  // Lock the shared answer stream
        -:   32:    MST_stats mst_stats;
        -:   33:
        2:   34:    auto* taskTuple = static_cast<tuple<MST_graph*, string*, int>*>(task);
        2:   35:    if (!taskTuple) {
    #####:   36:        cout << "Error: Invalid task tuple" << endl;
    #####:   37:        return;
        -:   38:    }
        2:   39:    MST_graph* clientMST = std::get<0>(*taskTuple);
        2:   40:    string* clientAns = std::get<1>(*taskTuple);
        2:   41:    int fdclient = std::get<2>(*taskTuple);
        -:   42:
        2:   43:    std::ostringstream localAns;  // Local answer stream
        2:   44:    localAns << "Thread " << std::this_thread::get_id() << "\n";
        2:   45:    localAns << " Longest path: " << mst_stats.getLongestDistance(*clientMST) << "\n";
        2:   46:    localAns << " Shortest path: " << mst_stats.getShortestDistance(*clientMST) << "\n";
        2:   47:    localAns << " Average path: " << mst_stats.getAverageDistance(*clientMST) << "\n";
        2:   48:    localAns << " Total weight: " << mst_stats.getTotalWeight(*clientMST) << "\n";
        2:   49:    delete taskTuple;  // Clean up dynamically allocated memory
        -:   50:
        -:   51:    // send the response back to the client
        2:   52:    if (send(fdclient, localAns.str().c_str(), localAns.str().length(), 0) == -1) {
    #####:   53:        perror("send");
        -:   54:    }
        2:   55:}
        -:   56:
       18:   57:void LeaderFollowerPool::leaderRole() {
        -:   58:    while (true) {
       18:   59:        void* task = nullptr;
        -:   60:        {
       18:   61:            std::unique_lock<std::mutex> lock(mutexqueue);
       18:   62:            cv_.wait(lock, [this] {
       38:   63:                std::lock_guard<std::mutex> stopLock(mutexstop);  // Lock mutexstop for stopFlag_ check
       76:   64:                return !eventQueue_.empty() || stopFlag_;
       38:   65:            });
        -:   66:
        -:   67:            {
       18:   68:                if (stopFlag_ && eventQueue_.empty()) {
       32:   69:                    return;  // Shutdown check
        -:   70:                }
        -:   71:            }
        -:   72:
       2*:   73:            if (!eventQueue_.empty()) {
        -:   74:                // Get the next task
        2:   75:                task = std::move(eventQueue_.front());
        2:   76:                eventQueue_.pop();
        -:   77:            } else {
    #####:   78:                continue;  // Recheck if spurious wakeup
        -:   79:            }
       18:   80:        }
        -:   81:
        -:   82:        // Execute the task outside the lock
        2:   83:        if (task) {
        2:   84:            mainFunction(task);
        -:   85:            // Notify other threads that a new leader can be elected
        2:   86:            followerRole();
        -:   87:        }
        2:   88:    }
        -:   89:}
        -:   90:
        2:   91:void LeaderFollowerPool::followerRole() {
        2:   92:    lock_guard<mutex> lock(mutexqueue);
        2:   93:    cv_.notify_one();  // Wake up next thread to be leader
        2:   94:}
        -:   95:
        -:   96:// Method to gracefully stop the thread pool
        4:   97:void LeaderFollowerPool::stop() {
        -:   98:    {
        4:   99:        std::lock_guard<std::mutex> lock(mutexqueue);  // Lock the mutex for the queue
        4:  100:        stopFlag_ = true;
        4:  101:        cv_.notify_all();  // Notify all waiting threads with the lock held
        4:  102:    }
        -:  103:
       20:  104:    for (auto& worker : workers_) {
       16:  105:        if (worker.joinable()) {
       16:  106:            worker.join();  // Wait for all worker threads to finish
        -:  107:        }
        -:  108:    }
        4:  109:    workers_.clear();  // Clear the worker threads vector
        -:  110:
        -:  111:    // cout << "LeaderFollowerPool stopped all worker threads." << endl;
        4:  112:}
